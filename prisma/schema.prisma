// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:BloopDB32002@db.ffnzqlxvciqxixfqwicp.supabase.co:5432/postgres" 
  // url      = "postgres://BloopAdmin3:BloopAdmin3@postgresql-151799-0.cloudclusters.net:19053/Bloop"
  // url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum Role {
  subscriber
  admin
  serviceProvider
  super_admin
}

enum Status {
  active
  deactive
  pending
  booked
  finish
}

enum PaymentMethods {
  Bkash
  Rocket
  Nogod
  CashOnDelivery
  Card
}

model User {
  id           String      @id @default(uuid())
  firstName    String
  lastName     String
  email        String?     @unique()
  profileImage String?     @unique
  image        Media?      @relation(fields: [profileImage], references: [id])
  address      String?
  contactNo    String?
  gender       Gender?
  dateOfBirth  String?
  role         Role
  bloodGroup   String?
  credential   Credential?
  status       Status
  providerUid  String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  subscriber      Subscriber?
  serviceProvider ServiceProvider?
  cart            Cart[]

  @@map("user")
}

model Credential {
  id           String   @id @default(uuid())
  userId       String   @unique
  role         Role
  email        String?  @unique()
  password     String?
  accessToken  String?
  refreshToken String?
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("credential")
}

model Service {
  id               String   @id @default(uuid())
  title            String   @unique
  price            Int
  orderType        String
  serviceArea      String[]
  details          String
  serviceGuarantee String
  status           Status
  serviceItem      String[]

  thumbnail     String      @unique
  image         Media       @relation(fields: [thumbnail], references: [id])
  serviceTypeId String
  service       ServiceType @relation(fields: [serviceTypeId], references: [id])

  feedback      Feedback[]
  servicePlaced ServicePlaced[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart[]

  @@map("service")
}

model ServiceType {
  id    String @id @default(uuid())
  title String @unique

  service         Service[]
  serviceProvider ServiceProvider[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("serviceType")
}

model ServiceProvider {
  id         String @id @default(uuid())
  providerId String @unique
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique

  serviceTypeId String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])

  availability  Boolean
  status        Status
  feedback      Feedback[]
  servicePlaced ServicePlaced[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("serviceProvider")
}

model Subscriber {
  id              String            @id @default(uuid())
  status          Status
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  order           Order[]
  shippingAddress ShippingAddress[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("subscriber")
}

model ShippingAddress {
  id           String     @id @default(uuid())
  address      String
  street       String
  area         String
  city         String
  isDefault    Boolean
  subscriberId String
  subscriber   Subscriber @relation(fields: [subscriberId], references: [id])
  label        String
  contactNo    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  order        Order[]

  @@map("shippingAddress")
}

model Feedback {
  id                String          @id @default(uuid())
  message           String
  rating            Int
  orderId           String
  order             Order           @relation(fields: [orderId], references: [id])
  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id])
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("feedback")
}

model Media {
  id                String   @id @default(uuid())
  public_id         String
  format            String
  created_at        String
  url               String
  secure_url        String
  folder            String?
  original_filename String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User?
  service           Service?

  @@map("media")
}

model Cart {
  id          String  @id @default(uuid())
  userId      String
  bookingDate String?
  user        User    @relation(fields: [userId], references: [id])
  serviceId   String
  service     Service @relation(fields: [serviceId], references: [id])

  @@map("cart")
}

// enum OrderAssignmentStatus {
//   OrderCreated 
//   OrderConfirmed
//   WorkerMoving
//   Working
//   OrderFinished

// }

model Order {
  id     String @id @default(uuid())
  cartId String @unique

  // assignmentStatus OrderAssignmentStatus @default(OrderCreated)
  subscriberId      String
  status            Status          @default(pending)
  shippingAddressId String          @unique  @default(uuid())
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  subscriber        Subscriber      @relation(fields: [subscriberId], references: [id])
  feedback          Feedback[]
  servicePlaced     ServicePlaced?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order")
}

model ServicePlaced {
  id String @id @default(uuid())

  bookingDate       String
  orderId           String  @unique
  serviceId         String
  serviceProviderId String
  paymentId         String? @unique
  issueItemName     String
  issueDetails      String

  order           Order           @relation(fields: [orderId], references: [id])
  service         Service         @relation(fields: [serviceId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  payment         Payment?        @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("servicePlaced")
}

model Payment {
  id String @id @default(uuid())

  price                   String
  paymentVarificationCode String?
  status                  PaymentStatus
  paymentMethod           PaymentMethods?
  servicePlaced           ServicePlaced?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment")
}

enum PaymentStatus {
  paid
  pending
}
